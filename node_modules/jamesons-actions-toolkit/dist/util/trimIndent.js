"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.trimIndent = void 0;
const rawString_1 = __importDefault(require("./rawString"));
const FIRST_LINES = /^(?<firstLines>[\r\n]*)/;
const FIRST_SPACES_OR_TABS = /^(?<indent>([ ]+|[\t]+))/;
const LAST_LINES = /(?<lastLines>[\r\n]*)$/;
const LAST_WHITESPACE = /[\r\n\s\t]*$/;
function trimEnd(line) {
    return line.replace(LAST_WHITESPACE, "");
}
function trimIndent(content, ...args) {
    var _a, _b, _c, _d, _e, _f;
    let str = typeof content === "string" ? content : (0, rawString_1.default)(content, ...args);
    const firstLines = ((_b = (_a = str.match(FIRST_LINES)) === null || _a === void 0 ? void 0 : _a.groups) === null || _b === void 0 ? void 0 : _b.firstLines) || "";
    const lastLines = ((_d = (_c = str.match(LAST_LINES)) === null || _c === void 0 ? void 0 : _c.groups) === null || _d === void 0 ? void 0 : _d.lastLines) || "";
    str = trimEnd(str.substring(firstLines.length, str.length - lastLines.length));
    let smallestIndent;
    for (const line of str.split("\n")) {
        const indent = (_f = (_e = line.match(FIRST_SPACES_OR_TABS)) === null || _e === void 0 ? void 0 : _e.groups) === null || _f === void 0 ? void 0 : _f.indent;
        if (indent && !smallestIndent) {
            smallestIndent = indent;
        }
        else if (typeof indent === "string" &&
            typeof smallestIndent === "string" &&
            indent.length < smallestIndent.length) {
            smallestIndent = indent;
        }
    }
    if (smallestIndent === undefined)
        return str;
    return str
        .split("\n")
        .map((line) => trimEnd(line.startsWith(smallestIndent)
        ? line.substring(smallestIndent.length)
        : line))
        .join("\n");
}
exports.trimIndent = trimIndent;
exports.default = trimIndent;
