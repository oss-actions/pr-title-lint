"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setOutput = exports.appendGithubOutputs = exports.saveGithubOutputs = exports.getGithubOutputs = exports.setEnvironmentVariable = exports.appendGithubEnvironment = exports.saveGithubEnvironment = exports.getGithubEnvironment = exports.appendPropertiesToEnvFile = exports.appendPropertiesToFile = exports.savePropertiesToEnvFile = exports.savePropertiesToFile = exports.getPropertiesFromEnvFile = exports.stringifyProperties = exports.parsePropertiesOfFile = exports.parseProperties = void 0;
const indexOf_1 = __importDefault(require("./util/indexOf"));
const node_crypto_1 = require("node:crypto");
const node_fs_1 = require("node:fs");
const node_path_1 = require("node:path");
const EOK = /(=|<<)/g;
function parseProperties(data) {
    const properties = {};
    let variableToDelimiterIndex = (0, indexOf_1.default)(data, EOK);
    while (variableToDelimiterIndex !== -1) {
        const name = data.substring(0, variableToDelimiterIndex);
        const singleline = data[variableToDelimiterIndex] === "=";
        const delimeterLength = singleline ? 1 : 2;
        const eolIndex = data.indexOf("\n", variableToDelimiterIndex + delimeterLength);
        if (singleline) {
            properties[name] = data.substring(variableToDelimiterIndex + delimeterLength, eolIndex);
            data = data.substring(eolIndex + 1);
            variableToDelimiterIndex = (0, indexOf_1.default)(data, EOK);
            continue;
        }
        const delimiter = "\n" +
            data.substring(variableToDelimiterIndex + delimeterLength, eolIndex + 1);
        const closingDelimiterIndex = data.indexOf(delimiter, eolIndex + 1);
        if (closingDelimiterIndex === -1) {
            throw new Error(`Error parsing outputs when reading '${name}': unexpected EOF`);
        }
        const outputValue = data.substring(eolIndex + 1, closingDelimiterIndex);
        properties[name] = outputValue;
        data = data.substring(closingDelimiterIndex + delimiter.length);
        variableToDelimiterIndex = data.indexOf("<<");
    }
    return properties;
}
exports.parseProperties = parseProperties;
function parsePropertiesOfFile(path) {
    return parseProperties((0, node_fs_1.readFileSync)(path).toString());
}
exports.parsePropertiesOfFile = parsePropertiesOfFile;
function stringifyKeyValue(key, value) {
    if (value.indexOf("\n") === -1)
        return `${key}=${value}\n`;
    const delimiter = (0, node_crypto_1.randomUUID)();
    return `${key}<<${delimiter}\n${value}\n${delimiter}\n`;
}
function stringifyProperties(properties) {
    let out = "";
    for (const [key, value] of Object.entries(properties)) {
        out += stringifyKeyValue(key, value);
    }
    return out;
}
exports.stringifyProperties = stringifyProperties;
function getPropertiesFromEnvFile(key) {
    if (!process.env[key]) {
        throw new Error(`Missing environment variable '${key}'`);
    }
    return parsePropertiesOfFile(process.env[key]);
}
exports.getPropertiesFromEnvFile = getPropertiesFromEnvFile;
function savePropertiesToFile(path, properties) {
    (0, node_fs_1.writeFileSync)(path, stringifyProperties(properties));
}
exports.savePropertiesToFile = savePropertiesToFile;
function savePropertiesToEnvFile(key, properties) {
    if (!process.env[key]) {
        throw new Error(`Missing environment variable '${key}'`);
    }
    savePropertiesToFile(process.env[key], properties);
}
exports.savePropertiesToEnvFile = savePropertiesToEnvFile;
function appendPropertiesToFile(path, properties) {
    if (!(0, node_fs_1.existsSync)(path)) {
        (0, node_fs_1.mkdirSync)((0, node_path_1.dirname)(path), { recursive: true });
        (0, node_fs_1.writeFileSync)(path, "");
    }
    const content = stringifyProperties(properties);
    (0, node_fs_1.appendFileSync)(path, content);
}
exports.appendPropertiesToFile = appendPropertiesToFile;
function appendPropertiesToEnvFile(key, properties) {
    if (!process.env[key]) {
        throw new Error(`Missing environment variable '${key}'`);
    }
    appendPropertiesToFile(process.env[key], properties);
}
exports.appendPropertiesToEnvFile = appendPropertiesToEnvFile;
function getGithubEnvironment() {
    return getPropertiesFromEnvFile("GITHUB_ENV");
}
exports.getGithubEnvironment = getGithubEnvironment;
function saveGithubEnvironment(properties) {
    savePropertiesToEnvFile("GITHUB_ENV", properties);
}
exports.saveGithubEnvironment = saveGithubEnvironment;
function appendGithubEnvironment(properties) {
    appendPropertiesToEnvFile("GITHUB_ENV", properties);
}
exports.appendGithubEnvironment = appendGithubEnvironment;
function setEnvironmentVariable(key, value) {
    process.env[key] = value;
    return appendGithubEnvironment({ [key]: value });
}
exports.setEnvironmentVariable = setEnvironmentVariable;
function getGithubOutputs() {
    return getPropertiesFromEnvFile("GITHUB_OUTPUT");
}
exports.getGithubOutputs = getGithubOutputs;
function saveGithubOutputs(properties) {
    savePropertiesToEnvFile("GITHUB_OUTPUT", properties);
}
exports.saveGithubOutputs = saveGithubOutputs;
function appendGithubOutputs(properties) {
    appendPropertiesToEnvFile("GITHUB_OUTPUT", properties);
}
exports.appendGithubOutputs = appendGithubOutputs;
function setOutput(key, value) {
    appendGithubOutputs({ [key]: value });
}
exports.setOutput = setOutput;
